import os
import cv2
import numpy as np
from features import find_correspondence_points

image_dir = '../imgs/dinos'

image_files = sorted([
    f for f in os.listdir(image_dir)
    if f.lower().endswith(('.jpg', '.jpeg', '.png', '.ppm', '.pgm', '.bmp', '.tif', '.tiff'))
])

matches_info = []

for i in range(len(image_files)):
    for j in range(i + 1, len(image_files)):
        img_path1 = os.path.join(image_dir, image_files[i])
        img_path2 = os.path.join(image_dir, image_files[j])

        img1 = cv2.imread(img_path1)
        img2 = cv2.imread(img_path2)

        if img1 is None or img2 is None:
            continue

        try:
            pts1, pts2 = find_correspondence_points(img1, img2)
            num_matches = len(pts1.T)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞—Ä—ã {image_files[i]} –∏ {image_files[j]}: {e}")
            num_matches = 0

        print(f"{image_files[i]} + {image_files[j]} ‚Üí {num_matches} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
        matches_info.append((image_files[i], image_files[j], num_matches))

# –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
matches_info.sort(key=lambda x: -x[2])

print("\nüìä –¢–æ–ø –ª—É—á—à–∏—Ö –ø–∞—Ä –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:")
for i, (img1, img2, m) in enumerate(matches_info[:10]):
    print(f"{i+1}) {img1} + {img2} ‚Üí {m} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
